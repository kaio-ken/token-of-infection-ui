// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   penpal

import { AsyncMethodReturns } from 'penpal';

export default class Portis {
    config: ISDKConfig;
    widget: Promise<{
        communication: AsyncMethodReturns<IConnectionMethods>;
        iframe: HTMLIFrameElement;
        widgetFrame: HTMLDivElement;
    }>;
    provider: any;
    constructor(dappId: string, network: string | INetwork, options?: IOptions);
    changeNetwork(network: string | INetwork, gasRelay?: boolean): void;
    setDefaultEmail(email: string): void;
    showPortis(): Promise<void>;
    logout(): Promise<{
        error: string;
        result: boolean;
    }>;
    onLogin(callback: (walletAddress: string, email?: string, reputation?: string) => void): void;
    onLogout(callback: () => void): void;
    getExtendedPublicKey(path?: string): Promise<{
        error: string;
        result: string;
    }>;
    importWallet(mnemonicOrPrivateKey: string): Promise<void>;
}

export interface INetwork {
    nodeUrl: string;
    chainId?: string;
    gasRelayHubAddress?: string;
}
export interface IConnectionMethods {
    getAccounts: (config: ISDKConfig) => Promise<{
        error: string;
        result: string[];
    }>;
    signTransaction: (txParams: ITransactionRequest, config: ISDKConfig) => Promise<{
        error: string;
        result: string;
    }>;
    signMessage: (msgParams: IMessageParams, config: ISDKConfig) => Promise<{
        error: string;
        result: string;
    }>;
    relay: (payload: IPayload, config: ISDKConfig) => Promise<{
        error: string;
        result: any;
    }>;
    showPortis: (config: ISDKConfig) => Promise<void>;
    importWallet: (mnemonicOrPrivateKey: string, config: ISDKConfig) => Promise<void>;
    getExtendedPublicKey: (path: string, config: ISDKConfig) => Promise<{
        error: string;
        result: string;
    }>;
    logout: () => Promise<{
        error: string;
        result: boolean;
    }>;
}
export interface ISDKConfig {
    dappId: string;
    network: INetwork;
    version: string;
    defaultEmail?: string;
    scope?: Scope[];
    registerPageByDefault?: boolean;
}
export type Scope = 'email';
export interface IOptions {
    scope?: Scope[];
    gasRelay?: boolean;
    registerPageByDefault?: boolean;
    pocketDevId?: string;
}
export interface ITransactionRequest {
    to?: string;
    from?: string;
    nonce?: string;
    gas?: string;
    gasPrice?: string;
    data?: string;
    value?: string;
    chainId?: number;
}
export interface IMessageParams {
    from: string;
    data: string | ITypedDataMessage[];
    messageStandard: 'signMessage' | 'signPersonalMessage' | 'signTypedMessage';
}
export interface ITypedDataMessage {
    name: string;
    type: string;
    value: string;
}
export interface IPayload {
    id: number;
    jsonrpc: string;
    method: string;
    params: any[];
}

