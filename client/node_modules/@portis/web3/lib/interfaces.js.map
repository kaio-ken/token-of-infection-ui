{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface INetwork {\n  nodeUrl: string;\n  chainId?: string;\n  gasRelayHubAddress?: string;\n}\n\nexport interface IConnectionMethods {\n  getAccounts: (config: ISDKConfig) => Promise<{ error: string; result: string[] }>;\n  signTransaction: (txParams: ITransactionRequest, config: ISDKConfig) => Promise<{ error: string; result: string }>;\n  signMessage: (msgParams: IMessageParams, config: ISDKConfig) => Promise<{ error: string; result: string }>;\n  relay: (payload: IPayload, config: ISDKConfig) => Promise<{ error: string; result: any }>;\n  showPortis: (config: ISDKConfig) => Promise<void>;\n  importWallet: (mnemonicOrPrivateKey: string, config: ISDKConfig) => Promise<void>;\n  getExtendedPublicKey: (path: string, config: ISDKConfig) => Promise<{ error: string; result: string }>;\n  logout: () => Promise<{ error: string; result: boolean }>;\n}\n\nexport interface ISDKConfig {\n  dappId: string;\n  network: INetwork;\n  version: string;\n  defaultEmail?: string;\n  scope?: Scope[];\n  registerPageByDefault?: boolean;\n}\n\nexport type Scope = 'email';\n\nexport interface IOptions {\n  scope?: Scope[];\n  gasRelay?: boolean;\n  registerPageByDefault?: boolean;\n  pocketDevId?: string;\n}\n\nexport interface ITransactionRequest {\n  to?: string;\n  from?: string;\n  nonce?: string;\n  gas?: string;\n  gasPrice?: string;\n  data?: string;\n  value?: string;\n  chainId?: number;\n}\n\nexport interface IMessageParams {\n  from: string;\n  data: string | ITypedDataMessage[];\n  messageStandard: 'signMessage' | 'signPersonalMessage' | 'signTypedMessage';\n}\n\nexport interface ITypedDataMessage {\n  name: string;\n  type: string;\n  value: string;\n}\n\nexport interface IPayload {\n  id: number;\n  jsonrpc: string;\n  method: string;\n  params: any[];\n}\n"]}