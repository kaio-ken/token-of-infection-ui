{"version":3,"sources":["components/TeamScore.js","components/TugOfWar.js","components/Messages.js","components/MessageBoard.js","components/Readme.js","App.js","serviceWorker.js","index.js"],"names":["TeamScore","state","percent","calculatePercent","props","count","total","Math","round","nextProps","this","setState","className","style","marginTop","marginBottom","name","fontWeight","Component","TugOfWar","zombieCount","humanCount","percentZombies","percentHumans","calculateBoxesFromCounts","zombies","humans","zombieDivs","i","push","key","humanDivs","justifyContent","paddingTop","map","div","Messages","people","messages","msg","_id","display","fontSize","paddingRight","team","floor","random","length","message","author","MessageBoard","account","handleChange","e","target","value","handleSubmit","preventDefault","axios","post","then","res","console","log","data","reverse","catch","err","Error","updateMessageBoard","get","textAlign","marginLeft","type","onSubmit","onChange","placeholder","Readme","margin","maxWidth","App","updateCounts","fetch","a","json","parseInt","flexGrow","justifyContents","paddingBottom","class","href","background","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8e3cb57.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./TeamScore.scss\";\n\nclass TeamScore extends Component {\n  state = {\n    percent: this.calculatePercent(this.props.count, this.props.total)\n  };\n\n  calculatePercent(count, total) {\n    return Math.round((count / total) * 100);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ percent: this.calculatePercent(nextProps.count, nextProps.total) });\n  }\n\n  render() {\n    return (\n      <div className=\"team-score\">\n        <h1 style={{ marginTop: 0, marginBottom: 0 }}>{this.props.count}</h1>\n        <h3\n          className={\n            this.props.name === \"zombies\" ? \"zombieColor\" : \"humanColor\"\n          }\n          style={{ marginTop: 0, marginBottom: \"44px\", fontWeight: 400 }}\n        >\n          {this.props.name}\n        </h3>\n        <h3 style={{ marginTop: 0, marginBottom: 0, fontWeight: 400 }}>\n          {this.state.percent}%\n        </h3>\n      </div>\n    );\n  }\n}\n\nexport default TeamScore;\n","import React, { Component } from \"react\";\nimport \"./TugOfWar.scss\";\n\nclass TugOfWar extends Component {\n  calculateBoxesFromCounts(zombieCount, humanCount) {\n    const total = zombieCount + humanCount;\n    const percentZombies = Math.round((zombieCount / total) * 100);\n    const percentHumans = Math.round((humanCount / total) * 100);\n\n    return { percentZombies, percentHumans };\n  }\n\n  render() {\n    const { percentZombies, percentHumans } = this.calculateBoxesFromCounts(\n      this.props.zombies,\n      this.props.humans\n    );\n\n    let zombieDivs = [];\n\n    for (let i = 0; i < percentZombies; i++) {\n      zombieDivs.push(<div key={i} className=\"zombie-pixel\" />);\n    }\n\n    let humanDivs = [];\n\n    for (let i = 0; i < percentHumans; i++) {\n      humanDivs.push(<div key={i} className=\"human-pixel\" />);\n    }\n\n    return (\n      <>\n        <div\n          className=\"tug-of-war\"\n          style={{\n            justifyContent: \"center\",\n            paddingTop: \"32px\"\n          }}\n        >\n          <div>\n            {humanDivs.map(div => div)}\n            {zombieDivs.map(div => div)}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TugOfWar;\n","import React, { Component } from \"react\";\nimport \"./Messages.scss\";\n\nclass Messages extends Component {\n  render() {\n    const people = [\n      \"üë©\",\n      \"üë©üèª\",\n      \"üë©üèº\",\n      \"üë©üèΩ\",\n      \"üë©üèæ\",\n      \"üë©üèø\",\n      \"üë®\",\n      \"üë®üèª\",\n      \"üë®üèº\",\n      \"üë®üèΩ\",\n      \"üë®üèæ\",\n      \"üë®üèø\"\n    ];\n    return (\n      <div className=\"messages-container\">\n        {this.props.messages.map(msg => (\n          <div key={msg._id} className=\"message\" style={{ display: \"flex\" }}>\n            <div style={{ fontSize: \"32px\", paddingRight: \"12px\" }}>\n              {msg.team === \"zombie\"\n                ? \"üßü\"\n                : people[Math.floor(Math.random() * people.length)]}\n            </div>\n            <div>\n              <div className=\"message__body caption\">{msg.message}</div>\n              <div className=\"message__caption\">\n                <div className=\"message__author caption disabled\">\n                  {msg.author}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Messages;\n","import React, { Component } from \"react\";\nimport \"./MessageBoard.scss\";\nimport Messages from \"./Messages.js\";\nimport axios from \"axios\";\n\nclass MessageBoard extends Component {\n  state = {\n    account: {},\n    message: \"\",\n    messages: []\n  };\n\n  componentDidMount() {\n    this.updateMessageBoard();\n    // const accounts = ethereum.enable();\n    // const account = account[0];\n\n    // this.setState({ account });\n  }\n\n  handleChange = e => {\n    this.setState({ message: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { message } = this.state;\n    if (message.length < 1) return;\n    axios\n      .post(\"/api/newMessage/\", { message })\n      .then(res => {\n        console.log(res);\n        this.setState({ message: \"\", messages: res.data.reverse() });\n      })\n      .catch(err => console.log(new Error(err)));\n  };\n\n  updateMessageBoard = () => {\n    axios.get(\"/api/getMessages/\").then(res => {\n      this.setState({ messages: res.data.reverse() });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"message-board body\">\n        <div>\n          <h3\n            style={{\n              textAlign: \"center\",\n              marginBottom: \"12px\",\n              marginLeft: \"12px\"\n            }}\n          >\n            Troll Box\n          </h3>\n        </div>\n        <div className=\"comment-box\">\n          <form type=\"POST\" onSubmit={this.handleSubmit}>\n            <input\n              type=\"text\"\n              onChange={this.handleChange}\n              value={this.state.message}\n              placeholder=\"CaN I hAz InFeCtIoN??\"\n            />\n            <button type=\"submit\">POST</button>\n          </form>\n        </div>\n        <Messages messages={this.state.messages} />\n      </div>\n    );\n  }\n}\n\nexport default MessageBoard;\n","import React, { Component } from \"react\";\nimport \"./Readme.scss\";\n\nclass Readme extends Component {\n  render() {\n    return (\n      <div style={{ margin: \"auto\", maxWidth: \"576px\" }}>\n        <h3>About</h3>\n        <p className=\"body white\">\n          On one gloomy day, there was a dumb male that made a mad scientist\n          mad. For retribution she released a dangerous replicating virus into\n          the NFT ecosystem, targeting the boy. The virus however quickly\n          started to spin out of control. Wallet holders everywhere were faced\n          with generative spam, and a full on zombie take-over.\n        </p>\n        <br />\n        <h3>How to Play</h3>\n        <ol className=\"body white\">\n          <li>\n            It‚Äôs humans versus zombies. If you have a human in your wallet,\n            you‚Äôre a human. If you have a zombie in your wallet, you‚Äôre a\n            zombie.\n          </li>\n          <li>\n            The zombies‚Äô goal is to infect every human and turn them all into\n            zombies. The humans‚Äô goal is to eliminate the zombies and stop the\n            virus.\n          </li>\n          <li>\n            Zombies infect every human they encounter in a wallet. To infect a\n            human, transfer a zombie to a human wallet.\n          </li>\n          <li>\n            Humans aren‚Äôt powerless against a zombie. If a human sends an\n            antidote grenade to a wallet with a zombie, the zombie goes back to\n            being a human.\n          </li>\n          <li>\n            When humans and zombies are transferred from wallet to wallet, they\n            multiply. One copy stays in the original wallet. The other copy goes\n            to infect the new wallet.{\" \"}\n          </li>\n          <li>\n            Sometimes two humans or two zombies in the same wallet will like\n            each other so much, a new human or new zombie will be born in that\n            wallet.\n          </li>\n          <li>\n            Token of Infection is a game played purely through transferring NFTs\n            from wallet to wallet. To join the game, you‚Äôll need a human or a\n            zombie to send a human or zombie into your wallet.\n          </li>\n        </ol>\n        <p className=\"body white\">\n          All is fair in love and war. Especially during an apocalypse.\n          <br />\n          <br />\n          Good luck, <br />A mad, mad scientist\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Readme;\n","import React, { Component } from \"react\";\nimport TeamScore from \"./components/TeamScore.js\";\nimport TugOfWar from \"./components/TugOfWar.js\";\nimport MessageBoard from \"./components/MessageBoard.js\";\nimport Readme from \"./components/Readme.js\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    team: \"zombie\",\n    humanCount: 0,\n    zombieCount: 0\n  };\n\n  componentDidMount() {\n    this.updateCounts();\n  }\n\n  async updateCounts() {\n    fetch(\"api/getCounts\").then(async res => {\n      res = await res.json();\n      let humanCount = res.humanCount;\n      let zombieCount = res.zombieCount;\n      this.setState({\n        humanCount: parseInt(humanCount, 10),\n        zombieCount: parseInt(zombieCount, 10)\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app-wrapper\">\n        <div className=\"left-side-wrapper scrollable\" style={{ flexGrow: 1 }}>\n          <h2\n            className={\n              this.state.humanCount > this.state.zombieCount\n                ? \"humanColor\"\n                : \"zombieColor\"\n            }\n            style={{\n              fontWeight: 800,\n              marginTop: \"66px\",\n              textAlign: \"center\"\n            }}\n          >\n            {this.state.humanCount > this.state.zombieCount\n              ? \"The humans are winning!\"\n              : this.state.humanCount < this.state.zombieCount\n              ? \"The zombies are winning!\"\n              : \"It's a tie!\"}\n          </h2>\n          <div className=\"scoreboard\">\n            <div className=\"scoreboard-inner\">\n              <TeamScore\n                name=\"humans\"\n                count={this.state.humanCount}\n                total={this.state.zombieCount + this.state.humanCount}\n              />\n              <TeamScore\n                name=\"zombies\"\n                count={this.state.zombieCount}\n                total={this.state.zombieCount + this.state.humanCount}\n              />\n            </div>\n          </div>\n          <TugOfWar\n            zombies={this.state.zombieCount}\n            humans={this.state.humanCount}\n          />\n          <div\n            style={{\n              display: \"flex\",\n              justifyContents: \"center\",\n              paddingTop: \"56px\",\n              paddingBottom: \"32px\"\n            }}\n          >\n            <div style={{ margin: \"auto\" }}>\n              <a\n                class=\"cta\"\n                href=\"https://opensea.io/category/token-of-infection\"\n                target=\"_blank\"\n              >\n                <span style={{ background: \"#E655A8\", marginRight: \"24px\" }}>\n                  Find Other Players\n                </span>\n              </a>\n            </div>\n          </div>\n          <Readme />\n        </div>\n        <div className=\"messageboard-container scrollable\">\n          <MessageBoard />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}