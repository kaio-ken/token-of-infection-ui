{"version":3,"sources":["components/TeamScore.js","components/TugOfWar.js","components/MessageBoard.js","App.js","serviceWorker.js","index.js"],"names":["TeamScore","state","percent","Math","round","props","count","total","className","style","marginTop","marginBottom","this","name","fontWeight","Component","TugOfWar","zombieCount","humanCount","percentZombies","percentHumans","calculateBoxesFromCounts","zombies","humans","zombieDivs","i","push","key","humanDivs","display","justifyContent","paddingTop","map","div","MessageBoard","messages","id","author","team","message","time","people","textAlign","msg","fontSize","marginRight","floor","random","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc1c42ba.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./TeamScore.scss\";\n\nclass TeamScore extends Component {\n  state = {\n    percent: Math.round((this.props.count / this.props.total) * 100)\n  };\n\n  render() {\n    return (\n      <div className=\"team-score\">\n        <h1 style={{ marginTop: 0, marginBottom: 0 }}>{this.props.count}</h1>\n        <h3\n          className={\n            this.props.name === \"zombies\" ? \"zombieColor\" : \"humanColor\"\n          }\n          style={{ marginTop: 0, marginBottom: \"56px\", fontWeight: 400 }}\n        >\n          {this.props.name}\n        </h3>\n        <h3 style={{ marginTop: 0, marginBottom: 0, fontWeight: 400 }}>\n          {this.state.percent}%\n        </h3>\n      </div>\n    );\n  }\n}\n\nexport default TeamScore;\n","import React, { Component } from \"react\";\nimport \"./TugOfWar.scss\";\n\nclass TugOfWar extends Component {\n  calculateBoxesFromCounts(zombieCount, humanCount) {\n    const total = zombieCount + humanCount;\n    const percentZombies = Math.round((zombieCount / total) * 100);\n    const percentHumans = Math.round((humanCount / total) * 100);\n\n    return { percentZombies, percentHumans };\n  }\n\n  render() {\n    const { percentZombies, percentHumans } = this.calculateBoxesFromCounts(\n      this.props.zombies,\n      this.props.humans\n    );\n\n    let zombieDivs = [];\n\n    for (let i = 0; i < percentZombies; i++) {\n      zombieDivs.push(<div key={i} className=\"zombie-pixel\" />);\n    }\n\n    let humanDivs = [];\n\n    for (let i = 0; i < percentHumans; i++) {\n      humanDivs.push(<div key={i} className=\"human-pixel\" />);\n    }\n\n    return (\n      <>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            paddingTop: \"32px\"\n          }}\n        >\n          <div>\n            {humanDivs.map(div => div)}\n            {zombieDivs.map(div => div)}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TugOfWar;\n","import React, { Component } from \"react\";\nimport \"./MessageBoard.scss\";\n\nclass MessageBoard extends Component {\n  state = {\n    messages: [\n      {\n        id: 1,\n        author: \"John Appleseed\",\n        team: \"zombie\",\n        message:\n          \"hello, i'm trying to infect more people. does anyone have any enemies I can send a token of infection to?\",\n        time: \"2019-09-06 23:53:46\"\n      },\n      {\n        id: 2,\n        author: \"John Appleseed\",\n        team: \"yellow\",\n        message: \"hello world\",\n        time: \"2019-09-06 23:53:46\"\n      },\n      {\n        id: 3,\n        author: \"John Appleseed\",\n        team: \"yellow\",\n        message: \"hello world\",\n        time: \"2019-09-06 23:53:46\"\n      },\n      {\n        id: 4,\n        author: \"John Appleseed\",\n        team: \"yellow\",\n        message: \"hello world\",\n        time: \"2019-09-06 23:53:46\"\n      },\n      {\n        id: 5,\n        author: \"John Appleseed\",\n        team: \"yellow\",\n        message: \"hello world\",\n        time: \"2019-09-06 23:53:46\"\n      },\n      {\n        id: 6,\n        author: \"John Appleseed\",\n        team: \"yellow\",\n        message: \"hello world\",\n        time: \"2019-09-06 23:53:46\"\n      },\n      {\n        id: 7,\n        author: \"John Appleseed\",\n        team: \"yellow\",\n        message: \"hello world\",\n        time: \"2019-09-06 23:53:46\"\n      },\n      {\n        id: 8,\n        author: \"John Appleseed\",\n        team: \"zombie\",\n        message: \"hello world\",\n        time: \"2019-09-06 23:53:46\"\n      }\n    ]\n  };\n\n  componentDidMount() {\n    // fetch messages and set state\n  }\n\n  render() {\n    const people = [\n      \"üë©\",\n      \"üë©üèª\",\n      \"üë©üèº\",\n      \"üë©üèΩ\",\n      \"üë©üèæ\",\n      \"üë©üèø\",\n      \"üë®\",\n      \"üë®üèª\",\n      \"üë®üèº\",\n      \"üë®üèΩ\",\n      \"üë®üèæ\",\n      \"üë®üèø\"\n    ];\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          paddingTop: \"64px\"\n        }}\n      >\n        <div className=\"message-board body\" style={{ textAlign: \"center\" }}>\n          <h2>Message Board</h2>\n          <div className=\"messages-container\">\n            {this.state.messages.map(msg => (\n              <div key={msg.id} className=\"message\">\n                <div className=\"message__body\">{msg.message}</div>\n                <div className=\"message__caption\">\n                  <div className=\"message__author\">\n                    <span style={{ fontSize: \"24px\", marginRight: \"10px\" }}>\n                      {msg.team === \"zombie\"\n                        ? \"üßü\"\n                        : people[Math.floor(Math.random() * people.length)]}\n                    </span>\n                    {msg.author} at\n                    {msg.time}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MessageBoard;\n","import React, { Component } from \"react\";\nimport TeamScore from \"./components/TeamScore.js\";\nimport TugOfWar from \"./components/TugOfWar.js\";\nimport MessageBoard from \"./components/MessageBoard.js\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    team: \"zombie\",\n    humans: {\n      count: 789\n    },\n    zombies: {\n      count: 1024\n    }\n  };\n\n  componentDidMount() {\n    // get data and set state\n  }\n\n  render() {\n    return (\n      <div>\n        <h2\n          className={this.state.team === \"human\" ? \"humanColor\" : \"zombieColor\"}\n          style={{\n            fontWeight: 400,\n            marginTop: \"66px\",\n            marginBottom: \"56px\",\n            textAlign: \"center\"\n          }}\n        >\n          You are a {this.state.team}\n        </h2>\n        <div className=\"scoreboard\">\n          <div className=\"scoreboard-inner\">\n            <div>\n              <TeamScore\n                name=\"humans\"\n                count={this.state.humans.count}\n                total={this.state.zombies.count + this.state.humans.count}\n              />\n            </div>\n            <div>\n              <TeamScore\n                name=\"zombies\"\n                count={this.state.zombies.count}\n                total={this.state.zombies.count + this.state.humans.count}\n              />\n            </div>\n          </div>\n        </div>\n        <TugOfWar\n          zombies={this.state.zombies.count}\n          humans={this.state.humans.count}\n        />\n\n        <MessageBoard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}